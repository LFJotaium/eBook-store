<section class="book-profile py-5 bg-light">



    @if (ViewBag.Message != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @ViewBag.Message
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Display ViewBag Errors -->
    @if (ViewBag.Error != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @ViewBag.Error
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Display TempData Messages -->
    @if (TempData["Message"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Message"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Display TempData Errors -->
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    <div class="container shadow-lg p-4 bg-white rounded">
        <div class="row g-5">
            <!-- Book Image -->
            <div class="col-md-4 d-flex justify-content-center align-items-center">
                <img src="@Model.CoverImagePath" class="img-fluid rounded shadow-lg" alt="@Model.Title" style="max-height: 400px; object-fit: cover;">
            </div>

            <!-- Book Details -->
            <div class="col-md-8">
                <h2 class="display-4 fw-bold text-primary mb-3">@Model.Title</h2>
                <div class="mb-4">
                    <p class="mb-2"><i class="fas fa-user me-2 text-secondary"></i><strong>Author:</strong> @Model.AuthorName</p>
                    <p class="mb-2"><i class="fas fa-building me-2 text-secondary"></i><strong>Publisher:</strong> @Model.Publisher</p>
                    <p class="mb-2"><i class="fas fa-tags me-2 text-secondary"></i><strong>Genre:</strong> @Model.Genre</p>
                    <p class="mb-2"><i class="fas fa-calendar-alt me-2 text-secondary"></i><strong>Year of Publish:</strong> @Model.YearOfPublish</p>
                    <p class="mb-2"><i class="fas fa-dollar-sign me-2 text-secondary"></i><strong>Price:</strong> <span class="text-success">@Model.Price.CurrentPriceBuy.ToString("C")</span></p>
                </div>



            </div>
            <form method="post" action="@Url.Action("SubmitBookFeedback", "Home")">
                <input type="hidden" name="bookId" value="@Model.ID" />
                <label for="rating">Rating:</label>
                <input type="number" name="rating" min="1" max="5" required />
                <label for="comment">Comment:</label>
                <textarea name="comment"></textarea>
                <button type="submit">Submit Feedback</button>
            </form>

        </div>
    </div>
</section>
<section class="book-feedback py-4">
    <div class="container">
        <h3 class="text-primary mb-4">User Feedback</h3>
        <div id="feedback-container" class="mb-3">
            <!-- Feedback items will be dynamically loaded here -->
        </div>
        <button id="load-more-feedback" class="btn btn-outline-primary d-none">View More</button>
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const feedbackContainer = document.getElementById('feedback-container');
        const loadMoreButton = document.getElementById('load-more-feedback');

        let bookId = @Model.ID; // Assuming Razor syntax to inject the book ID.
        let offset = 0;
        const limit = 5;

        const fetchFeedback = (append = false) => {
            fetch(`/Home/GetBookFeedback?bookId=${bookId}&offset=${offset}&limit=${limit}`)
                .then(response => response.json())
                .then(data => {
                    if (data && data.length) {
                        data.forEach(feedback => {
                            const feedbackElement = document.createElement('div');
                            feedbackElement.classList.add('mb-3', 'p-3', 'border', 'rounded', 'shadow-sm', 'bg-light');
                            feedbackElement.innerHTML = `
                                <p><strong>${feedback.username}</strong> <span class="text-secondary">(${feedback.rating}â˜…)</span></p>
                                <p>${feedback.comment || 'No comment provided.'}</p>
                                <small class="text-muted">Posted on ${new Date(feedback.createdAt).toLocaleDateString()}</small>
                            `;
                            feedbackContainer.appendChild(feedbackElement);
                        });
                        offset += data.length;
                        loadMoreButton.classList.remove('d-none');
                    } else {
                        loadMoreButton.classList.add('d-none');
                    }
                })
                .catch(error => console.error('Error fetching feedback:', error));
        };

        loadMoreButton.addEventListener('click', () => fetchFeedback(true));

        // Fetch initial feedback
        fetchFeedback();
    });
</script>
