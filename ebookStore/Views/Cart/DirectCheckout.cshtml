@{
    ViewData["Title"] = "Direct Checkout";

    var paypalClientId = ViewBag.PaypalClientId;
    var totalAmount = ViewBag.TotalAmount;
    var bookId = ViewBag.BookId;
}

<h1>Direct Checkout</h1>

<!-- Display ViewBag Messages -->
@if (ViewBag.Message != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @ViewBag.Message
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Display ViewBag Errors -->
@if (ViewBag.Error != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @ViewBag.Error
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Display TempData Messages -->
@if (TempData["Message"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["Message"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Display TempData Errors -->
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (totalAmount > 0)
{
    <p><strong>Book Price: </strong>@totalAmount.ToString("C")</p>

    <div id="paypal-button-container"></div>

    <script src="https://www.paypal.com/sdk/js?client-id=@paypalClientId&currency=USD"></script>
    <script>
        var totalAmount = @totalAmount; // Assigning totalAmount to a JavaScript variable
        var bookId = @bookId; // Assigning bookId to a JavaScript variable

        paypal.Buttons({
            createOrder: function (data, actions) {
                return actions.order.create({
                    purchase_units: [{
                        amount: {
                            value: totalAmount.toFixed(2) // Use totalAmount in JavaScript
                        }
                    }]
                });
            },
            onApprove: function (data, actions) {
                return actions.order.capture().then(function (details) {
                    alert('Transaction completed by ' + details.payer.name.given_name);
                    // After successful payment, call the controller to handle the payment
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("CompleteDirectPayment", "Cart")',
                        data: {
                            bookId: bookId,  // Pass the bookId here
                            paypalOrderId: data.orderID,  // Use the correct parameter name
                            totalAmount: totalAmount      // Pass the totalAmount here as a number
                        },
                        success: function () {
                            // Redirect to the Home/Index page after successful payment
                            window.location.href = '@Url.Action("Index", "Home")';
                        },
                        error: function () {
                            alert('There was an issue processing your payment.');
                            window.location.href = '@Url.Action("Index", "Home")';
                        }
                    });
                });
            },
            onCancel: function (data) {
                alert('Transaction canceled');
            }
        }).render('#paypal-button-container');
    </script>
}
else
{
    <p>Unable to retrieve book details. <a href="@Url.Action("Index", "Home")">Go back to the homepage</a>.</p>
}